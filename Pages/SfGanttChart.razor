@page "/ganttchart"

<table class="table">
    <tbody>
        <tr>
            <td>
                <h6>Please Enter the Level and Click Collapse/Expand  Button</h6>
            </td>
            <td>
                <input type="number" @bind-value="@Level">
                <button type="button" class="btn btn-primary" @onclick="CollapseAtLevel">Collapse</button>
                <button type="button" class="btn btn-primary" @onclick="ExpandAtLevel">Expand</button>
            </td>
        </tr>
        <tr>
            <td><h6>To Show/Hide Gantt Pane</h6></td>
            <td>
                <button type="button" class="btn btn-primary" @onclick="ShowChart">ShowGanttPane</button>
                <button type="button" class="btn btn-primary" @onclick="HideChart">HideGanttPane</button>
            </td>
        </tr>
        <tr>
            <td><h6>Please Choose the Event Date</h6></td>
            <td>
                <SfDatePicker @bind-Value="Event1"></SfDatePicker>
            </td>
        </tr>
    </tbody>
</table>


<SfGantt DataSource="@TaskCollection" Width="1200px" Height="450px" @ref="Gantt" AllowRowDragAndDrop="true" HighlightWeekends="true" Toolbar="Tools" ContextMenuItems="@(new List<object>() { "TaskInformation","Indent","Outdent","DeleteTask"})" AllowReordering="true" ShowColumnMenu="true" TreeColumnIndex=1 RowHeight="RowsHeight" GridLines="Syncfusion.Blazor.Gantt.GridLine.None">
    <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" ParentID="ParentId" Dependency="Predecessor"></GanttTaskFields>
    <GanttColumns>
        <GanttColumn Field="TaskId"></GanttColumn>
        <GanttColumn Field="TaskName"></GanttColumn>
        <GanttColumn Field="StartDate"></GanttColumn>
        <GanttColumn Field="Duration"></GanttColumn>
        <GanttColumn Field="Predecessor" HeaderText="Predecessor"></GanttColumn>
    </GanttColumns>
    <GanttTimelineSettings TimelineUnitSize=100>
        <GanttTopTierSettings Unit="TimelineViewMode.Month" Format="MMMM">
        </GanttTopTierSettings>
        <GanttBottomTierSettings Unit="TimelineViewMode.Week">
            <FormatterTemplate>
                @{
                    @if (context.Tier == "bottom")
                    {
                        <div> @this.Formatter((context.Date)) </div>
                    }
                }
            </FormatterTemplate>
        </GanttBottomTierSettings>
    </GanttTimelineSettings>
    <GanttEditSettings AllowEditing="true" AllowAdding="true" AllowDeleting="true" AllowTaskbarEditing="true"></GanttEditSettings>
    <GanttSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Both" Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GanttSelectionSettings>
    <GanttTemplates TValue="TaskData">
        <ParentTaskbarTemplate>
            <div class="e-gantt-parent-taskbar e-custom-parent" style="height:22px;border-radius:5px;text-overflow:ellipsis;">
                <span class="e-task-label" style="color:black;top:18px;font-size:9px;overflow: hidden;white-space: nowrap;">@((context as TaskData).TaskName)</span>
            </div>
        </ParentTaskbarTemplate>
        <TaskbarTemplate>
            <SfTooltip Target=".e-gantt-child-taskbar" CloseDelay="100" Content=@((context as TaskData).TaskName)>
                <div class="e-gantt-child-taskbar e-custom-moments" style="height:22px;border-radius:5px;">
                    <span class="e-task-label" style="color:black;top:18px;font-size:12px;overflow: hidden;white-space: nowrap;">@((context as TaskData).TaskName)</span>
                </div>
            </SfTooltip>
        </TaskbarTemplate>
    </GanttTemplates>
    <GanttEvents BeforeTooltipRender="BeforeTooltipRender" OnToolbarClick="ToolBarClick" TValue="TaskData"></GanttEvents>
    <GanttEventMarkers>
        <GanttEventMarker Day="Event1" Label="Today"
                          CssClass="e-custom-event-marker"></GanttEventMarker>
    </GanttEventMarkers>
    <GanttHolidays>
        <GanttHoliday From="@Holiday1" To="@Holiday2" Label="Public holidays"
                      CssClass="e-custom-holiday"></GanttHoliday>
    </GanttHolidays>
</SfGantt>

<style>
    @@font-face {
        font-family: 'e-grid-rowheight';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    .e-small-icon::before {
        font-family: 'e-grid-rowheight';
        content: '\e707';
    }

    .e-medium-icon::before {
        font-family: 'e-grid-rowheight';
        content: '\e701';
    }

    .e-big-icon::before {
        font-family: 'e-grid-rowheight';
        content: '\e702';
    }
    .e-custom-parent {
        height: 11px !important;
        background-color: #a6a6a6;
    }

    .e-custom-moments {
        background-color: #60A3D9;
    }

    .intro {
        background-color: #E8EEF1;
    }

    .e-gantt .e-right-resize-gripper::before {
        content: '\e80b'
    }

    .e-gantt .e-left-resize-gripper::before {
        content: '\e80b'
    }

    .e-info-icon::before {
        content: '\e729';
    }
    .e-gantt .e-gantt-chart .e-custom-holiday {
        background-color: #e82869;
    }
    .parent-bold {
        font-weight: bold;
    }

    .line {
        border-width: 0 0 1px !important;
    }
</style>

@code{
    public SfGantt<TaskData> Gantt;
    public List<TaskData> TaskCollection { get; set; }
    public double Level { get; set; }
    public int RowsHeight { get; set; } = 36;
    public List<ItemModel> Tools = new List<ItemModel>();
    public DateTime Event1 = System.DateTime.Now;
    public DateTime Holiday1 = new DateTime(2019, 04, 08);
    public DateTime Holiday2 = new DateTime(2019, 04, 12);
    public bool isFirst = true;
    protected override void OnInitialized()
    {
        this.TaskCollection = GetTaskCollection();
        Tools.Add(new ItemModel() { PrefixIcon = "e-big-icon", Id = "small", Align = ItemAlign.Left, TooltipText = "Small" });
        Tools.Add(new ItemModel() { PrefixIcon = "e-medium-icon", Id = "medium", Align = ItemAlign.Left, TooltipText = "Medium" });
        Tools.Add(new ItemModel() { PrefixIcon = "e-small-icon", Id = "big", Align = ItemAlign.Left, TooltipText = "Big" });
    }
    public class TaskData
    {
        public int TaskId { get; set; }
        public string TaskName { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Duration { get; set; }
        public int Progress { get; set; }
        public string Predecessor { get; set; }
        public int? ParentId { get; set; }
    }
    public void CollapseAtLevel()
    {
        this.Gantt.CollapseAtLevel(Level);
    }
    public void ExpandAtLevel()
    {
        this.Gantt.ExpandAtLevel(Level);
    }
    public void ShowChart()
    {
        this.Gantt.SetSplitterPosition(Syncfusion.Blazor.Gantt.SplitterView.Default);
    }
    public void HideChart()
    {
        this.Gantt.SetSplitterPosition(Syncfusion.Blazor.Gantt.SplitterView.Grid);
    }
    public string Formatter(DateTime? date)
    {
        DateTime dateTime = (DateTime)(date);
        string bottomString = dateTime.Day + "-" + (dateTime.Day + 6);
        return bottomString;
    }
    public void QueryCellInfo(Syncfusion.Blazor.Grids.QueryCellInfoEventArgs<TaskData> args)
    {
        String[] s1 = new String[1] { "intro" };
        args.Cell.AddClass(s1);
        if (isFirst)
        {
            if (args.Column.Index == Gantt.Columns.Count() - 1)
            {
                isFirst = false;
            }
            args.Cell.AddClass(new string[] { "line" });
        }
        if (args.Column.Field.Equals("TaskName"))
        {
            var Source = Gantt.CurrentViewData;
            var keys = Source.GroupBy(rec => (rec as IDictionary<string, object>)["ParentId"]).Where(g => g.Key != null).ToDictionary(g => g.Key?.ToString(), g => g.ToList()).Keys.ToList();//collect the ParentId values using GroupBy    
            if (args.Data.ParentId == null || keys.Contains(args.Data.TaskId.ToString()))   // Checking whether it is a parent record by comparing IdMapping field of record with the ParentID values
            {
                args.Cell.AddClass(new string[] { "parent-bold" });   // customized only parent rows
                args.Cell.AddClass(new string[] { "line" }); // customized to draw line for parent task name
            }
        }
    }
    public void QueryChartRowInfo(Syncfusion.Blazor.Gantt.QueryChartRowInfoEventArgs<TaskData> args)
    {
        String[] s1 = new String[1] { "intro" };
        args.Row.AddClass(s1);
    }
    public void BeforeTooltipRender(BeforeTooltipRenderEventArgs<TaskData> args)
    {
        args.Cancel = true;
    }
    public void ToolBarClick(Syncfusion.Blazor.Navigations.ClickEventArgs Args)
    {
        if (Args.Item.Id == "small")
        {
            RowsHeight = 20;
        }
        if (Args.Item.Id == "medium")
        {
            RowsHeight = 40;
        }
        if (Args.Item.Id == "big")
        {
            RowsHeight = 60;
        }
    }
    public static List<TaskData> GetTaskCollection()
    {
        List<TaskData> Tasks = new List<TaskData>() {

    new TaskData() {
        TaskId = 1,
        TaskName = "Project initiation",
        StartDate = new DateTime(2019, 04, 02),
        EndDate = new DateTime(2019, 04, 21)
    },
    new TaskData() {
        TaskId = 2,
        TaskName = "Identify Site location",
        StartDate = new DateTime(2019, 04, 02),
        Duration = "10",
        Progress = 30,
        ParentId = 1
    },
    new TaskData() {
        TaskId = 3,
        TaskName = "Perform soil test",
        StartDate = new DateTime(2019, 04, 02),
        Duration = "4",
        Progress = 40,
        ParentId = 1,
        Predecessor = "2"
    },
    new TaskData() {
        TaskId = 4,
        TaskName = "Soil test approval",
        StartDate = new DateTime(2019, 04, 02),
        Duration = "3",
        Progress = 30,
        ParentId = 1,
        Predecessor = "3"
    },
    new TaskData() {
        TaskId = 5,
        TaskName = "Project estimation",
        StartDate = new DateTime(2019, 04, 02),
        EndDate = new DateTime(2019, 04, 21)
    },
    new TaskData() {
        TaskId = 6,
        TaskName = "Develop floor plan for estimation",
        StartDate = new DateTime(2019, 04, 04),
        Duration = "3",
        Progress = 30,
        ParentId = 5,
    },
    new TaskData() {
        TaskId = 7,
        TaskName = "List materials",
        StartDate = new DateTime(2019, 04, 04),
        Duration = "13",
        Progress = 40,
        ParentId = 5,
    },
    new TaskData() {
        TaskId = 8,
        TaskName = "Estimation approval",
        StartDate = new DateTime(2019, 04, 04),
        Duration = "25",
        Progress = 30,
        ParentId = 5,
    },
     new TaskData() {
        TaskId = 9,
        TaskName = "Demand Analysis",
        StartDate = new DateTime(2019, 04, 02),
        EndDate = new DateTime(2019, 04, 21)
    },
    new TaskData() {
        TaskId = 10,
        TaskName = "Customer Strength",
        StartDate = new DateTime(2019, 04, 04),
        Duration = "3",
        Progress = 30,
        ParentId = 9,
    },
    new TaskData() {
        TaskId = 11,
        TaskName = "Competitor analysis",
        StartDate = new DateTime(2019, 04, 04),
        Duration = "13",
        Progress = 40,
        ParentId = 10,
    },
    new TaskData() {
        TaskId = 12,
        TaskName = "Product Strength Analysis",
        StartDate = new DateTime(2019, 04, 04),
        Duration = "25",
        Progress = 30,
        ParentId = 11,
    },
    new TaskData() {
        TaskId = 13,
        TaskName = "Project estimation",
        StartDate = new DateTime(2019, 04, 02),
        EndDate = new DateTime(2019, 04, 21)
    },
    new TaskData() {
        TaskId = 14,
        TaskName = "Develop floor plan for estimation",
        StartDate = new DateTime(2019, 04, 22),
        Duration = "25",
        Progress = 30,
        ParentId = 13
    },
    new TaskData() {
        TaskId = 15,
        TaskName = "List materials",
        StartDate = new DateTime(2019, 04, 20),
        Duration = "12",
        Progress = 40,
        ParentId = 14
    },
    new TaskData() {
        TaskId = 16,
        TaskName = "Estimation approval",
        StartDate = new DateTime(2019, 04, 19),
        Duration = "6",
        Progress = 30,
        ParentId = 15
    },
    new TaskData() {
        TaskId = 17,
        TaskName = "Identifying raw mayerials",
        StartDate = new DateTime(2019, 04, 17),
        Duration = "6",
        ParentId=16,
    },
    new TaskData() {
        TaskId = 18,
        TaskName = "Define cost plan",
        StartDate = new DateTime(2019, 04, 15),

        Progress = 30,
        ParentId=17,
    },
    new TaskData() {
        TaskId = 19,
        TaskName = "Manufacturing cost",
        StartDate = new DateTime(2019, 04, 13),
        Duration = "7",
        Progress = 40,
        ParentId = 18,
    },
    new TaskData() {
        TaskId = 20,
        TaskName = "Selling cost",
        StartDate = new DateTime(2019, 04, 12),
        Duration = "6",
        Progress = 30,
        ParentId = 19,
    },
    new TaskData() {
        TaskId = 21,
        TaskName = "Developement of final design",
        StartDate = new DateTime(2019, 04, 09),
        Duration = "5",
        ParentId=20
    },
    new TaskData() {
        TaskId = 22,
        TaskName = "Develope dimensions and design",
        StartDate = new DateTime(2019, 04, 08),
        Duration = "15",
        Progress = 30,
        ParentId=21,
    },
    new TaskData() {
        TaskId = 23,
        TaskName = "Develope designs to meet industry",
        StartDate = new DateTime(2019, 04, 05),
        Duration = "15",
        Progress = 40,
        ParentId = 22,
    },
    new TaskData() {
        TaskId = 24,
        TaskName = "Include all the deatails",
        StartDate = new DateTime(2019, 04, 02),
        Duration = "25",
        Progress = 30,
        ParentId = 23,
    },
};
        return Tasks;
    }
}