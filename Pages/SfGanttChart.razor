@page "/ganttchart"
@inject IJSRuntime JSRuntime
@using Syncfusion.Blazor.ProgressBar
@using Syncfusion.Blazor.DropDowns

<table class="table">
    <tbody>
        <tr>
            <td>
                <h6>Please Enter the Level and Click Collapse/Expand  Button</h6>
            </td>
            <td>
                <input type="number" @bind-value="@Level">
                <button type="button" class="btn btn-primary" @onclick="CollapseAtLevel">Collapse</button>
                <button type="button" class="btn btn-primary" @onclick="ExpandAtLevel">Expand</button>
            </td>
        </tr>
        <tr>
            <td><h6>To Show/Hide Gantt Pane</h6></td>
            <td>
                <button type="button" class="btn btn-primary" @onclick="ShowChart">ShowGanttPane</button>
                <button type="button" class="btn btn-primary" @onclick="HideChart">HideGanttPane</button>
            </td>
        </tr>
        <tr>
            <td><h6>Please Choose the Event Date</h6></td>
            <td>
                <SfDatePicker @bind-Value="Event1"></SfDatePicker>
            </td>
        </tr>
        <tr>
            <td><h6>Please Enter the Row Height</h6></td>
            <td>
                <input type="number" @bind-value="@RowsHeight">
            </td>
        </tr>
    </tbody>
</table>

<SfToolbar Width="1200px">
    <ToolbarItems>
        <ToolbarItem>
            <Template>
                <div><SfButton CssClass="e-round" Content="D" @onclick="DayModeClick" IsPrimary="@IsDayPrimary"></SfButton></div>
            </Template>
        </ToolbarItem>
        <ToolbarItem>
            <Template>
                <div><SfButton CssClass="e-round" Content="W" @onclick="WeekModeClick" IsPrimary="@IsWeekPrimary"></SfButton></div>
            </Template>
        </ToolbarItem>
        <ToolbarItem>
            <Template>
                <div><SfButton CssClass="e-round" Content="M" @onclick="MonthModeClick" IsPrimary="@IsMonthPrimary"></SfButton></div>
            </Template>
        </ToolbarItem>
        <ToolbarItem Align="ItemAlign.Right">
            <Template>
                <div>
                    <SfDropDownList TItem="@LevelFields" TValue="string" PopupHeight="230px" Placeholder="Show all level" DataSource="@Levels">
                        <DropDownListEvents TItem="LevelFields" TValue="string" ValueChange="OnChange"></DropDownListEvents>
                        <DropDownListFieldSettings Text="Text" Value="ID"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </Template>
        </ToolbarItem>
        <ToolbarItem Align="ItemAlign.Right">
            <Template>
                <div>
                    <SfTooltip Target="#target" CssClass="e-tooltip-css" OpensOn="Click" Position="Position.RightBottom" WindowCollision="true" ShowTipPointer=false>
                        <TooltipTemplates>
                            <Content>
                                <div>
                                    <div class='info'>
                                        <h3>Layers</h3>
                                        <h4>Show</h4>
                                        <SfCheckBox Label="Actual Hours" @bind-Checked="isChecked"></SfCheckBox>
                                        <br>
                                        <br>
                                        <SfCheckBox Label="Actual Effort" @bind-Checked="isChecked"></SfCheckBox>
                                        <br>
                                        <br>
                                        <SfCheckBox Label="Baselines" @bind-Checked="isChecked"></SfCheckBox>
                                        <br>
                                        <br>
                                        <h4>Compare Actual Against</h4>
                                        <SfRadioButton Label="Schedule" Name="options" Value="card" @bind-Checked="stringChecked"></SfRadioButton>
                                        <br>
                                        <br>
                                        <SfRadioButton Label="Compare" Name="options" Value="cash" @bind-Checked="stringChecked"></SfRadioButton>
                                        <br>
                                        <br>
                                        <h4>Indicators</h4>
                                        <h5>Over Change</h5>
                                        <h5>THRESHOLD  100%</h5>
                                        <SfSlider Value="100" Min="100" Max="200"></SfSlider>
                                    </div>
                                </div>
                            </Content>
                        </TooltipTemplates>
                            <SfButton ID="target" Content="Tooltip"></SfButton>
                    </SfTooltip>
                </div>
            </Template>
        </ToolbarItem>
    </ToolbarItems>
</SfToolbar>

<div hidden="@IsTopButtonHide" style ="float:right;margin-top:75px;margin-left:1139px;position:absolute;z-index:3;">
    <SfButton @ref="TopButton" IsToggle="true" IconCss="@TopIconCss" CssClass="e-round" @onclick="TopIconClicked" IsPrimary=true></SfButton>
</div>
<SfGantt DataSource="@TaskCollection" Width="1200px" Height="450px" @ref="Gantt" AllowRowDragAndDrop="true" HighlightWeekends="true" ContextMenuItems="@(new List<object>() { "TaskInformation","Indent","Outdent","DeleteTask"})" AllowReordering="true" ShowColumnMenu="true" TreeColumnIndex=1 RowHeight="RowsHeight" GridLines="Syncfusion.Blazor.Gantt.GridLine.None">
    <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" ParentID="ParentId" Dependency="Predecessor" ExpandState="IsExpanded"></GanttTaskFields>
    <GanttColumns>
        <GanttColumn Field="TaskId"></GanttColumn>
        <GanttColumn Field="TaskName" Width=300>
            <Template>
                @{
                    var taskData = (context as TaskData);
                    <SfTooltip Target="#txt" CssClass="customtooltip" CloseDelay="500" ShowTipPointer=false OffsetX=110 OffsetY=50 WindowCollision=true>
                        <TooltipTemplates>
                            <Content>
                                <SfButton ID=".txt" IconCss="e-icons e-plus-icon" CssClass="e-round" IsPrimary="true" @onclick="PlusButtonClick"></SfButton>
                                <SfButton ID=".txt" IconCss="e-icons e-back-icon" CssClass="e-round" IsPrimary="true" @onclick="BackButtonClick"></SfButton>
                                <SfButton ID=".txt" IconCss="e-icons e-forward-icon" CssClass="e-round" IsPrimary="true" @onclick="ForwardButtonClick"></SfButton>
                                <SfButton ID=".txt" IconCss="e-icons e-option-icon" CssClass="e-round" @onclick="OptionButtonClick"></SfButton>
                            </Content>
                        </TooltipTemplates>
                        <span id="txt">@taskData.TaskName</span>
                    </SfTooltip>
                }
            </Template>
        </GanttColumn>
        <GanttColumn Field="StartDate"></GanttColumn>
        <GanttColumn Field="Duration"></GanttColumn>
        <GanttColumn Field="Predecessor" HeaderText="Predecessor"></GanttColumn>
        <GanttColumn Field="Done" HeaderText="Done"></GanttColumn>
        <GanttColumn Field="IsMilestone"></GanttColumn>
    </GanttColumns>
    <GanttTimelineSettings TimelineUnitSize=100>
        <GanttTopTierSettings Unit="@TopTierUnit" Format="@TopTierFormat"></GanttTopTierSettings>
        <GanttBottomTierSettings Unit="@BottomTierUnit">
                <FormatterTemplate>
                @{
                    @if (context.Tier == "bottom")
                    {
                        <div> @this.Formatter((context.Date)) </div>
                    }
                }
                </FormatterTemplate>
        </GanttBottomTierSettings>
    </GanttTimelineSettings>
    <GanttEditSettings AllowEditing="true" AllowAdding="true" AllowDeleting="true" AllowTaskbarEditing="true"></GanttEditSettings>
    <GanttSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Both" Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GanttSelectionSettings>
    <GanttTemplates TValue="TaskData">
        <ParentTaskbarTemplate>
            <div class="e-gantt-parent-taskbar e-custom-parent" style="height:22px;border-radius:5px;text-overflow:ellipsis;">
                @if (((context as TaskData).IsExpanded) == false)
                {
                    <span class="e-task-label" style="color:black;top:18px;font-size:9px;overflow: hidden;white-space: nowrap;">@totalHours((context as TaskData).TaskId)</span>
                }
            </div>
        </ParentTaskbarTemplate>
        <TaskbarTemplate>
            @if (((context as TaskData).IsMilestone) == false)
            {
                <SfTooltip Target=".e-gantt-child-taskbar" CssClass="customtooltip" CloseDelay="1000" ShowTipPointer=false Position="Position.TopRight" OffsetX=-110 OffsetY=10 WindowCollision=true OpensOn="Hover">
                    <TooltipTemplates>
                        <Content>
                            <SfButton ID=".e-gantt-child-taskbar" IconCss="e-icons e-open-icon" CssClass="e-round" @onclick="ButtonClick1"></SfButton>
                            <SfButton ID=".e-gantt-child-taskbar" IconCss="e-icons e-refresh-icon" CssClass="e-round" @onclick="ButtonClick2"></SfButton>
                            <SfButton ID=".e-gantt-child-taskbar" IconCss="e-icons e-clear-icon" CssClass="e-round" @onclick="ButtonClick3"></SfButton>
                        </Content>
                    </TooltipTemplates>
                    <div class="e-gantt-child-taskbar e-custom-moments" style="height:34px;border-radius:5px;">
                        <div class="e-custom-div1" style="height:10px;border-radius:5px;margin-top:14px;"></div>
                        <SfTooltip Target=".e-custom-div" CssClass="customdivtooltip" ShowTipPointer=false>
                            <TooltipTemplates>
                                <Content>
                                    <div>
                                        <h6>There are 12 more hours changed than scheduled</h6>
                                        <br>
                                        <h6>Changed 28h</h6>
                                        <SfProgressBar Value="28" Height="10" Minimum="0" Maximum="28" TrackThickness="6" ProgressThickness="6" ProgressColor="#FFA500" CornerRadius="CornerType.Round"></SfProgressBar>
                                        <h6>Scheduled 16h</h6>
                                        <SfProgressBar Value="16" Height="10" Minimum="0" Maximum="28" TrackThickness="6" ProgressThickness="6" ProgressColor="#60A3D9" CornerRadius="CornerType.Round"></SfProgressBar>
                                        <br>
                                        <SfButton ID=".e-custom-div" @onclick="CustomDivClicked" Content="Show in X-ray Mode"></SfButton>
                                    </div>
                                </Content>
                            </TooltipTemplates>
                            <div class="e-custom-div" style="height:10px;border-radius:5px;"></div>
                        </SfTooltip>
                    </div>
            </SfTooltip>            
            <span class="e-task-label" style="color:black;top:18px;font-size:12px;overflow: hidden;white-space: nowrap;">@((context as TaskData).TaskName)</span>
            }
            else
            {
                <div class="e-gantt-child-taskbar e-custom-moments" style="height:34px;border-radius:5px;"></div>
                <div class="e-gantt-child-taskbar milestone"></div>
            }

        </TaskbarTemplate>
    </GanttTemplates>
    <GanttEvents OnActionBegin= "ActionBeginEvent" BeforeTooltipRender="BeforeTooltipRender" QueryCellInfo="QueryCellInfo" TValue="TaskData"></GanttEvents>
    <GanttEventMarkers>
        <GanttEventMarker Day="Event1" Label="Today"
                          CssClass="e-custom-event-marker"></GanttEventMarker>
    </GanttEventMarkers>
    <GanttHolidays>
        <GanttHoliday From="@Holiday1" To="@Holiday2" Label="Public holidays"
                      CssClass="e-custom-holiday"></GanttHoliday>
    </GanttHolidays>
    <GanttSplitterSettings Position="280px"></GanttSplitterSettings>
</SfGantt>
<div style ="float:right;margin-top:-51px;margin-left:1139px;position:absolute;z-index:2;">
    <SfButton IconCss="e-icons e-bottom-icon" CssClass="e-round" @onclick="BottomIconClicked" IsPrimary=true></SfButton>
</div>


<style>
    @@font-face {
        font-family: 'e-grid-rowheight';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    .e-small-icon::before {
        font-family: 'e-grid-rowheight';
        content: '\e707';
    }

    .e-medium-icon::before {
        font-family: 'e-grid-rowheight';
        content: '\e701';
    }

    .e-big-icon::before {
        font-family: 'e-grid-rowheight';
        content: '\e702';
    }
    .e-custom-parent {
        height: 11px !important;
        background-color: #a6a6a6;
    }

    .e-custom-moments {
        background-color: #60A3D9;
    }

    .e-custom-div {
        background-color: #FFA500;
    }

    .e-custom-div1 {
        background-color: #00ffff;
    }

    .intro {
        background-color: #E8EEF1;
    }

    .e-gantt .e-right-resize-gripper::before {
        content: '\e80b'
    }

    .e-gantt .e-left-resize-gripper::before {
        content: '\e80b'
    }
    .e-icons{
        color: #00ffff;
        font-size: 26px;
    }
    .e-open-icon::before {
        content: '\e70f';
    }
    .e-refresh-icon::before {
        content: '\e710';
    }
    .e-clear-icon::before {
        content: '\e703';
    }
    .e-plus-icon::before {
        content: '\e759';
    }
    .e-back-icon::before {
        content: '\e7c1';
    }
    .e-forward-icon::before {
        content: '\e7ce';
    }
    .e-option-icon::before {
        content: '\e781';
    }
    .e-bottom-icon::before {
        content: '\e808';
    }
    .e-top-icon::before {
        content: '\e771';
    }
    .e-exit-icon::before {
        content: '\e723';
    }
    .e-gantt .e-gantt-chart .e-custom-holiday {
        background-color: #e82869;
    }
    .parent-bold {
        font-weight: bold;
    }

    .line {
        border-width: 0 0 1px !important;
    }
    .customtooltip.e-tooltip-wrap .e-tip-content {
        top:16px;
        line-height: 20px;
    }

    .customtooltip.e-tooltip-wrap .e-arrow-tip.e-tip-bottom {
        height: 12px;
        left: 50%;
        top: 100%;
        width: 24px;
    }

    .customtooltip.e-tooltip-wrap .e-arrow-tip.e-tip-top {
        height: 12px;
        left: 50%;
        top: -9px;
        width: 24px;
    }

    .customtooltip.e-tooltip-wrap .e-arrow-tip.e-tip-left {
        height: 24px;
        left: -9px;
        top: 48%;
        width: 12px;
    }

    .customtooltip.e-tooltip-wrap .e-arrow-tip.e-tip-right {
        height: 24px;
        left: 100%;
        top: 50%;
        width: 12px;
    }

    .customtooltip.e-tooltip-wrap {
        border-radius: 4px;
        opacity: 1;
    }

    .customtooltip.e-tooltip-wrap.e-popup {
        background-color: transparent;
        border: 2px solid transparent;
    }

    .customtooltip.e-tooltip-wrap .e-tip-content {
        color: #fff;
        font-size: 12px;
    }

    .customdivtooltip.e-tooltip-wrap .e-tip-content {
        color: #000;
    }

    .customdivtooltip.e-tooltip-wrap.e-popup {
        background-color: #e5e5e5;
        border: transparent;
    }

    .customdivtooltip.e-tooltip-wrap {
        border-radius: 4px;
        opacity: 1;
    }

    .e-search:before{
        content: '\e7f8';
    }
    .e-tooltip-css.e-tooltip-wrap.e-popup {
        background-color: #60A3D9;
    }
    .info a {
        color: #2FA1E3;
    }
    .info {
        padding-left: 12px;
        padding-right: 5px;
    }
    .milestone {
        width: 20px !important;
        top: 7px;
        margin-left: -10px;
        position: absolute;
        height: 22px;
        background-color: red;
        border-radius: 10px;
    }
</style>

@code{
    public SfGantt<TaskData> Gantt;
    public SfButton TopButton;
    private bool IsTopButtonHide = false;
    private string TopIconCss = "e-icons e-top-icon";
    public List<TaskData> TaskCollection { get; set; }
    public double Level { get; set; }
    public int RowsHeight { get; set; } = 56;
    public DateTime Event1 = System.DateTime.Now;
    public DateTime Holiday1 = new DateTime(2019, 04, 08);
    public DateTime Holiday2 = new DateTime(2019, 04, 12);
    public bool isFirst = true;
    private bool isChecked = false;
    private string stringChecked = "card";
    public string TopTierFormat = "MMM";
    TimelineViewMode TopTierUnit = TimelineViewMode.Month;
    TimelineViewMode BottomTierUnit = TimelineViewMode.Week;
    private bool IsDayPrimary = false;
    private bool IsWeekPrimary = true;
    private bool IsMonthPrimary = false;
    public class LevelFields
    {
        public double ID { get; set; }
        public string Text { get; set; }
    }
    private List<LevelFields> Levels = new List<LevelFields>() {
        new LevelFields(){ ID= 0, Text= "Level 1" },
        new LevelFields(){ ID= 1, Text= "Level 2" },
        new LevelFields(){ ID= 2, Text= "Level 3" },
        new LevelFields(){ ID= 3, Text= "Level 4" },
        new LevelFields(){ ID= 4 , Text= "Show all levels" },
     };
    public void OnChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, LevelFields> args)
    {
        Level = (int)args.ItemData.ID;
        if((int)args.ItemData.ID != 4)
        {
            CollapseAtLevel();
        } else
        {
            Gantt.ExpandAllAsync();
        }
    }
    private int totalHours(int id)
    {
        var tHours = 0;
        foreach (IDictionary<string, object> record in Gantt.FlatData)
        {
            foreach (var key in record.Keys)
            {
                if (key == "ParentId")
                {
                    object value = null;
                    var i = record.TryGetValue(key, out value);
                    if (value != null && (int)value == id)
                    {
                        object duration = null;
                        record.TryGetValue("Duration", out duration);
                        tHours += Convert.ToInt32(duration);
                    }
                }
            }
        }
        return tHours;
    }

    protected override void OnInitialized()
    {
        this.TaskCollection = GetTaskCollection();
    }

    
    public class TaskData
    {
        public int TaskId { get; set; }
        public string TaskName { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Duration { get; set; }
        public int Progress { get; set; }
        public string Predecessor { get; set; }
        public int? ParentId { get; set; }
        public bool IsExpanded { get; set; }
        public string Done { get; set; }
        public bool IsMilestone { get; set; }
    }
    public void CollapseAtLevel()
    {
        this.Gantt.CollapseAtLevel(Level);
    }
    public void ExpandAtLevel()
    {
        this.Gantt.ExpandAtLevel(Level);
    }
    public void ShowChart()
    {
        this.Gantt.SetSplitterPosition("280px");
        if (IsTopButtonHide)
        {
            IsTopButtonHide = !IsTopButtonHide;
        }
    }
    public void HideChart()
    {
        this.Gantt.SetSplitterPosition(Syncfusion.Blazor.Gantt.SplitterView.Grid);
        IsTopButtonHide = !IsTopButtonHide;
    }

    public string Formatter(DateTime? date)
    {
        DateTime dateTime = (DateTime)(date);
        string bottomString = "";
        if (BottomTierUnit.ToString() == "Week")
        {
            bottomString = dateTime.Day + "-" + ((dateTime.AddDays(6)).Day);
        }
        else if (BottomTierUnit.ToString() == "Day")
        {
            bottomString = dateTime.Day.ToString();
        }
        else if (BottomTierUnit.ToString() == "Month")
        {
            bottomString = dateTime.ToString("MMM");
        }
        return bottomString;
    }
    private void DayModeClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        TopTierUnit = TimelineViewMode.Week;
        BottomTierUnit = TimelineViewMode.Day;
        TopTierFormat = "yyyy MMMM";
        IsDayPrimary = true;
        IsWeekPrimary = false;
        IsMonthPrimary = false;
    }
    private void WeekModeClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        TopTierUnit = TimelineViewMode.Month;
        BottomTierUnit = TimelineViewMode.Week;
        TopTierFormat = "MMM";
        IsDayPrimary = false;
        IsWeekPrimary = true;
        IsMonthPrimary = false;
    }
    private void MonthModeClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        TopTierUnit = TimelineViewMode.Year;
        BottomTierUnit = TimelineViewMode.Month;
        TopTierFormat = "yyyy";
        IsDayPrimary = false;
        IsWeekPrimary = false;
        IsMonthPrimary = true;
    }
    
    private async Task ButtonClick1()
    {
        await JSRuntime.InvokeAsync<object>("ButtonClick", "Button1clicked");
    }
    private async Task ButtonClick2()
    {
        await JSRuntime.InvokeAsync<object>("ButtonClick", "Button2clicked");
    }
    private async Task ButtonClick3()
    {
        await JSRuntime.InvokeAsync<object>("ButtonClick", "Button3clicked");
    }
    private async Task CustomDivClicked()
    {
        await JSRuntime.InvokeAsync<object>("ButtonClick", "Clicked X-ray mode");
    }
    private async Task PlusButtonClick()
    {
        await JSRuntime.InvokeAsync<object>("ButtonClick", "PlusButtonClick");
    }
    private async Task BackButtonClick()
    {
        await JSRuntime.InvokeAsync<object>("ButtonClick", "BackButtonClick");
    }
    private async Task ForwardButtonClick()
    {
        await JSRuntime.InvokeAsync<object>("ButtonClick", "ForwardButtonClick");
    }
    private async Task OptionButtonClick()
    {
        await JSRuntime.InvokeAsync<object>("ButtonClick", "OptionButtonClick");
    }
    private async Task TopIconClicked()
    {
        if (this.Gantt.SplitterSettings.View == Syncfusion.Blazor.Gantt.SplitterView.Default)
        {
            this.Gantt.SplitterSettings.View = Syncfusion.Blazor.Gantt.SplitterView.Chart;
            this.Gantt.SetSplitterPosition(Syncfusion.Blazor.Gantt.SplitterView.Chart);
            this.TopIconCss = "e-icons e-exit-icon";
        }
        else if (this.Gantt.SplitterSettings.View == Syncfusion.Blazor.Gantt.SplitterView.Chart)
        {
            this.Gantt.SplitterSettings.View = Syncfusion.Blazor.Gantt.SplitterView.Default;
            this.Gantt.SetSplitterPosition(Syncfusion.Blazor.Gantt.SplitterView.Default);
            this.TopIconCss = "e-icons e-top-icon";
        }
    }
    private async Task BottomIconClicked()
    {
        await JSRuntime.InvokeAsync<object>("ButtonClick", "BottomIconClicked");
    }
    public void QueryCellInfo(Syncfusion.Blazor.Grids.QueryCellInfoEventArgs<TaskData> args)
    {
        if (isFirst)
        {
            if (args.Column.Index == Gantt.Columns.Count() - 1)
            {
                isFirst = false;
            }
            args.Cell.AddClass(new string[] { "line" });
        }
        if (args.Column.Field.Equals("TaskName"))
        {
            var Source = Gantt.CurrentViewData;
            var keys = Source.GroupBy(rec => (rec as IDictionary<string, object>)["ParentId"]).Where(g => g.Key != null).ToDictionary(g => g.Key?.ToString(), g => g.ToList()).Keys.ToList();//collect the ParentId values using GroupBy
            if (args.Data.ParentId == null || keys.Contains(args.Data.TaskId.ToString()))   // Checking whether it is a parent record by comparing IdMapping field of record with the ParentID values
            {
                args.Cell.AddClass(new string[] { "parent-bold" });   // customized only parent rows
                args.Cell.AddClass(new string[] { "line" }); // customized to draw line for parent task name
            }
        }
    }
    public void QueryChartRowInfo(Syncfusion.Blazor.Gantt.QueryChartRowInfoEventArgs<TaskData> args)
    {
        String[] s1 = new String[1] { "intro" };
        args.Row.AddClass(s1);
    }
    public void BeforeTooltipRender(BeforeTooltipRenderEventArgs<TaskData> args)
    {
        args.Cancel = true;
    }
    public void ActionBeginEvent(GanttActionEventArgs<TaskData> args)
    {
        args.PredecessorOffSetValidation = true;
    }
    public static List<TaskData> GetTaskCollection()
    {
        List<TaskData> Tasks = new List<TaskData>() {

    new TaskData() {
        TaskId = 1,
        TaskName = "Project initiation",
        StartDate = new DateTime(2019, 04, 02),
        EndDate = new DateTime(2019, 04, 21),
        IsExpanded = false,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 2,
        TaskName = "Identify Site location",
        StartDate = new DateTime(2019, 04, 02),
        Duration = "10",
        Progress = 30,
        ParentId = 1,
        IsExpanded = true,
        Done = "No"
    },
    new TaskData() {
        TaskId = 3,
        TaskName = "Perform soil test",
        StartDate = new DateTime(2019, 04, 02),
        Duration = "4",
        Progress = 40,
        ParentId = 1,
        Predecessor = "2",
        IsExpanded = true,
        Done = "No",
        IsMilestone = true
    },
    new TaskData() {
        TaskId = 4,
        TaskName = "Soil test approval",
        StartDate = new DateTime(2019, 04, 02),
        Duration = "3",
        Progress = 30,
        ParentId = 1,
        Predecessor = "3",
        IsExpanded = true,
        Done = "No"
    },
    new TaskData() {
        TaskId = 5,
        TaskName = "Project estimation",
        StartDate = new DateTime(2019, 04, 02),
        EndDate = new DateTime(2019, 04, 21),
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 6,
        TaskName = "Develop floor plan for estimation",
        StartDate = new DateTime(2019, 04, 04),
        Duration = "3",
        Progress = 30,
        ParentId = 5,
        IsExpanded = true,
        Done = "No"
    },
    new TaskData() {
        TaskId = 7,
        TaskName = "List materials",
        StartDate = new DateTime(2019, 04, 04),
        Duration = "13",
        Progress = 40,
        ParentId = 5,
        IsExpanded = true,
        //6+2 - predecessor task + 2 days lags
        Done = "No", Predecessor = "6+2",
        IsMilestone = true
    },
    new TaskData() {
        TaskId = 8,
        TaskName = "Estimation approval",
        StartDate = new DateTime(2019, 04, 04),
        Duration = "25",
        Progress = 30,
        ParentId = 5,
        IsExpanded = true, Predecessor="7-2",
        Done = "No"
    },
     new TaskData() {
        TaskId = 9,
        TaskName = "Demand Analysis",
        StartDate = new DateTime(2019, 04, 02),
        EndDate = new DateTime(2019, 04, 21),
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 10,
        TaskName = "Customer Strength",
        StartDate = new DateTime(2019, 04, 04),
        Duration = "3",
        Progress = 30,
        ParentId = 9,
        IsExpanded = false,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 11,
        TaskName = "Competitor analysis",
        StartDate = new DateTime(2019, 04, 04),
        Duration = "13",
        Progress = 40,
        ParentId = 10,
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 12,
        TaskName = "Product Strength Analysis",
        StartDate = new DateTime(2019, 04, 04),
        Duration = "25",
        Progress = 30,
        ParentId = 11,
        IsExpanded = true,
        Done = "No"
    },
    new TaskData() {
        TaskId = 13,
        TaskName = "Project estimation",
        StartDate = new DateTime(2019, 04, 02),
        EndDate = new DateTime(2019, 04, 21),
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 14,
        TaskName = "Develop floor plan for estimation",
        StartDate = new DateTime(2019, 04, 22),
        Duration = "25",
        Progress = 30,
        ParentId = 13,
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 15,
        TaskName = "List materials",
        StartDate = new DateTime(2019, 04, 20),
        Duration = "12",
        Progress = 40,
        ParentId = 14,
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 16,
        TaskName = "Estimation approval",
        StartDate = new DateTime(2019, 04, 19),
        Duration = "6",
        Progress = 30,
        ParentId = 15,
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 17,
        TaskName = "Identifying raw mayerials",
        StartDate = new DateTime(2019, 04, 17),
        Duration = "6",
        ParentId=16,
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 18,
        TaskName = "Define cost plan",
        StartDate = new DateTime(2019, 04, 15),
        Progress = 30,
        ParentId=17,
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 19,
        TaskName = "Manufacturing cost",
        StartDate = new DateTime(2019, 04, 13),
        Duration = "7",
        Progress = 40,
        ParentId = 18,
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 20,
        TaskName = "Selling cost",
        StartDate = new DateTime(2019, 04, 12),
        Duration = "6",
        Progress = 30,
        ParentId = 19,
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 21,
        TaskName = "Developement of final design",
        StartDate = new DateTime(2019, 04, 09),
        Duration = "5",
        ParentId=20,
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 22,
        TaskName = "Develope dimensions and design",
        StartDate = new DateTime(2019, 04, 08),
        Duration = "15",
        Progress = 30,
        ParentId=21,
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 23,
        TaskName = "Develope designs to meet industry",
        StartDate = new DateTime(2019, 04, 05),
        Duration = "15",
        Progress = 40,
        ParentId = 22,
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 24,
        TaskName = "Include all the deatails",
        StartDate = new DateTime(2019, 04, 02),
        Duration = "25",
        Progress = 30,
        ParentId = 23,
        IsExpanded = true,
        Done = "No"
    },
};
        return Tasks;
    }
}