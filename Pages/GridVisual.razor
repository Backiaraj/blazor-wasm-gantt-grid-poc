@page "/visualgrid"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons

<SfGrid @ref="Grid" DataSource="@GridData" Height="400" Width="800" AllowFiltering="true"
        GridLines="Syncfusion.Blazor.Grids.GridLine.Both" EnableVirtualization="true">
    <GridEvents QueryCellInfo="QueryCellInfo" TValue="Order"></GridEvents>
    <GridAggregates>
        <GridAggregate>
            <GridAggregateColumns>
                <GridAggregateColumn Field=@nameof(Order.Freight) Type="AggregateType.Sum" Format="C2">
                    <FooterTemplate>
                        @{
                            var aggregate = (context as AggregateTemplateContext);
                            <div>
                                <p>Sum: @aggregate.Sum</p>
                            </div>
                        }
                    </FooterTemplate>
                </GridAggregateColumn>
                <GridAggregateColumn Field=@nameof(Order.EmployeeID) Type="AggregateType.Sum">
                    <FooterTemplate>
                        @{
                            var aggregate = (context as AggregateTemplateContext);
                            <div>
                                <p>Sum: @aggregate.Sum</p>
                            </div>
                        }
                    </FooterTemplate>
                </GridAggregateColumn>
            </GridAggregateColumns>
        </GridAggregate>
    </GridAggregates>
    <GridColumns>
        <GridColumn Field=@nameof(Order.OrderID) HeaderText="Order ID" IsPrimaryKey="true" Width="150"></GridColumn>
        <GridColumn Field=@nameof(Order.CustomerID) HeaderText="Customer Name" Width="250">
            <HeaderTemplate>
                <div>Customer Name</div>
                <div @onclick="Filter" style="position: relative; top: -21px; left: 120px;">
                    <img height="15" src="@($"Img/filter.png")" alt="Filter" />
                </div>
                <div @onclick="Clear" style="position: relative; top: -42px; left: 150px;">
                    <img height="15" src="@($"Img/Clear.png")" alt="Filter" />
                </div>
            </HeaderTemplate>
        </GridColumn>
        <GridColumn Field=@nameof(Order.EmployeeID) HeaderText="Employee ID" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr" }})" Width="200"></GridColumn>
        <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight" Format="C2" TextAlign="TextAlign.Right" Width="200"></GridColumn>
        <GridColumn Field=@nameof(Order.OrderDate) HeaderText=" Order Date" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="200">
            <HeaderTemplate>
                <div>Order Date</div>
                <div @onclick="Custom" style="position: relative; top: -21px; left: -110px;">
                    <img height="20" src="@($"Img/Comments.png")" alt="Filter" />
                </div>
            </HeaderTemplate>
        </GridColumn>
        <GridColumn Field=@nameof(Order.ShipCountry) HeaderText="Ship Country" Width="150">
            <Template>
                @{ var country = (context as Order).ShipCountry;
                    if (country == "Austria")
                    {
                        <div style="background-color:antiquewhite">@country</div>
                    }
                    else
                    {
                        <div style="background-color:burlywood">@country</div>
                    } }
            </Template>
        </GridColumn>
        <GridColumn Field=@nameof(Order.ShipCity) HeaderText="Ship City" Width="150"></GridColumn>
        <GridColumn Field=@nameof(Order.ShipAddress) HeaderText="Ship Address" Width="150"></GridColumn>
        <GridColumn Field=@nameof(Order.ShippedDate) HeaderText="Shipped Date" Width="150"></GridColumn>
        <GridColumn HeaderText="Buttons" TextAlign="TextAlign.Center" Width="120">
            <Template>
                @{ var e = (context as Order);
                    <div class="showhim">
                        HOVER ME
                        <div class="showme">
                            <SfButton CssClass="e-round" IconCss="e-icons e-plus-icon" @onclick="ClickVisButton" IsPrimary="true"></SfButton>
                        </div>
                        <div class="ok"></div>
                    </div>
                }
            </Template>
        </GridColumn>
        <GridColumn HeaderText="Comments" TextAlign="TextAlign.Center" Width="120">
            <Template>
                @{ var order = (context as Order);
                    <div @onclick="@(() => Click(order))">
                        <img height="25" src="@($"Img/Comments.png")" alt="@order.OrderID" />
                    </div>
                }
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>


<SfDialog Width="250px" IsModal="true" @bind-Visible="@IsVisible">
    <DialogEvents OnOverlayClick="@OnOverlayclick">
    </DialogEvents>
    <DialogTemplates>
        <Content> @Content </Content>
    </DialogTemplates>
</SfDialog>


<SfDialog Width="250px" IsModal="true" @bind-Visible="@IsVisible1">
    <DialogEvents OnOverlayClick="@OnOverlayclick">
    </DialogEvents>
    <DialogTemplates>
        <Content> @Content1 </Content>
    </DialogTemplates>
</SfDialog>


<style>

    .e-grid.sf-grid .e-gridcontent .e-content.e-yscroll {
        overflow: hidden;
    }
 
    .e-grid.sf-grid .e-gridcontent .e-content.e-yscroll:hover {
        overflow-y: scroll !important;
        overflow-x: scroll;
    }


    /*to change the font style for column data*/
    .e-attr {
        font-family: 'Gill Sans';
        font-weight: bold;
    }
    /*to style the Grid header vertical separator*/
    .e-grid.e-default.e-bothlines .e-headercell {
        border-left-color: red;
        border-left-width: 2px;
    }


    /*to style to browser scrollbar*/
    /* width */
    .e-grid .e-gridcontent .e-content::-webkit-scrollbar {
        width: 20px;
    }

    /* Track */
    .e-grid .e-gridcontent .e-content::-webkit-scrollbar-track {
        box-shadow: inset 0 0 5px grey;
        border-radius: 10px;
    }

    /* Handle */
    .e-grid .e-gridcontent .e-content::-webkit-scrollbar-thumb {
        background: red;
        border-radius: 10px;
        box-shadow: 2px 5px #b30000;
    }

        /* Handle on hover */
        .e-grid .e-gridcontent .e-content::-webkit-scrollbar-thumb:hover {
            background: #b30000;
        }
    /*to apply styles to cell*/

    .e-grid .e-rowcell.alfkitextstyle {
        color: orangered;
    }

    .e-grid .e-rowcell.anantrtextstyle {
        color: yellow;
    }

    .e-grid .e-rowcell.othertextstyle {
        color: greenyellow
    }

    .e-plus-icon::before {
        content: '\e823';
    }

    .showme {
        display: none;
    }

    .showhim:hover .showme {
        display: block;
    }

    .showhim:hover .ok {
        display: none;
    }
</style>

@code{ SfGrid<Order> Grid;
    public List<Order> GridData { get; set; }
    private bool IsVisible { get; set; } = false;
    string Content = "";
    private bool IsVisible1 { get; set; } = false;
    string Content1 = "";
    public void QueryCellInfo(QueryCellInfoEventArgs<Order> args)
    {
        if (args.Column.Field == "CustomerID")
        {
            if (args.Data.CustomerID == "ALFKI")
            {
                args.Cell.AddClass(new string[] { "alfkitextstyle" });
            }
            else if (args.Data.CustomerID == "ANANTR")
            {
                args.Cell.AddClass(new string[] { "anantrtextstyle" });
            }
            else
            {
                args.Cell.AddClass(new string[] { "othertextstyle" });
            }
        }
    }

    public void Click(Order ord)
    {
        Content = ord.CustomerID + " " + " from " + ord.ShipCountry + " " + " :- You can provide Comments here";
        this.IsVisible = true;
    }
    private void OnOverlayclick(MouseEventArgs arg)
    {
        this.IsVisible = false;
        this.IsVisible1 = false;
    }
    public async Task Filter()
    {
        await Grid.FilterByColumn("CustomerID", "equal", "ANTON");
    }
    public async Task Clear()
    {
        await Grid.ClearFiltering();
    }

    public async Task Custom()
    {
        IsVisible1 = true;
        Content1 = "You can perform Custom actions using this button click";
    }
    public void ClickVisButton()
    {
        IsVisible1 = true;
        Content1 = "You can perform Custom actions using this button click";
    }

    protected override void OnInitialized()
    {
        List<Order> Order = new List<Order>();
        int Code = 10000;
        for (int i = 1; i < 10000; i++)
        {
            Order.Add(new Order(Code + 1, "ALFKI", i + 0, 2.3 * i, false, new DateTime(1991, 05, 15), "Berlin", "Denmark", new DateTime(1996, 7, 16), "Kirchgasse 6"));
            Order.Add(new Order(Code + 2, "ANATR", i + 2, 3.3 * i, true, new DateTime(1990, 04, 04), "Madrid", "Brazil", new DateTime(1996, 9, 11), "Avda. Azteca 123"));
            Order.Add(new Order(Code + 3, "ANTON", i + 1, 4.3 * i, true, new DateTime(1957, 11, 30), "Cholchester", "Germany", new DateTime(1996, 10, 7), "Carrera 52 con Ave. Bolívar #65-98 Llano Largo"));
            Order.Add(new Order(Code + 4, "BLONP", i + 3, 5.3 * i, false, new DateTime(1930, 10, 22), "Marseille", "Austria", new DateTime(1996, 12, 30), "Magazinweg 7"));
            Order.Add(new Order(Code + 5, "BOLID", i + 4, 6.3 * i, true, new DateTime(1953, 02, 18), "Tsawassen", "Switzerland", new DateTime(1997, 12, 3), "1029 - 12th Ave. S."));
            Code += 5;
        }
        GridData = Order;
    }

    public class Order
    {
        public Order(int OrderID, string CustomerID, int EmployeeID, double Freight, bool Verified, DateTime OrderDate, string ShipCity, string ShipCountry, DateTime ShippedDate, string ShipAddress)
        {
            this.OrderID = OrderID;
            this.CustomerID = CustomerID;
            this.EmployeeID = EmployeeID;
            this.Freight = Freight;
            this.Verified = Verified;
            this.OrderDate = OrderDate;
            this.ShipCity = ShipCity;
            this.ShipCountry = ShipCountry;
            this.ShippedDate = ShippedDate;
            this.ShipAddress = ShipAddress;
        }
        public int? OrderID { get; set; }
        public string CustomerID { get; set; }
        public int? EmployeeID { get; set; }
        public double? Freight { get; set; }
        public DateTime? OrderDate { get; set; }
        public bool Verified { get; set; }
        public DateTime? ShippedDate { get; set; }
        public string ShipCountry { get; set; }
        public string ShipCity { get; set; }
        public string ShipAddress { get; set; }
    } }
