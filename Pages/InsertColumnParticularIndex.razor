@page "/customcc"
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Grids
@using Action = Syncfusion.Blazor.Grids.Action


<SfGrid @ref="DefaultGrid" DataSource="@Employees" ShowColumnChooser="true" AllowReordering="true" GridLines="Syncfusion.Blazor.Grids.GridLine.Both">
    <GridEvents OnActionComplete="OnActionComplete" TValue="EmployeeData"></GridEvents>
    <GridColumns>
        <GridColumn Field=@nameof(EmployeeData.EmployeeID) HeaderText="Employee ID" Width="120">
            <HeaderTemplate>
                @{
                    var a = "EmployeeID";
                }
                <span style="width:20px;height:20px;border-color:red" @onclick="(e)=>onclick(e,a)" class="e-icons e-plus-icon"></span>@a
            </HeaderTemplate>
        </GridColumn>
        <GridColumn Field=@nameof(EmployeeData.FirstName) HeaderText="First Name" Width="130" Visible="false">
            <HeaderTemplate>
                @{
                    var a = "FirstName";
                }
               <span style="width:20px;height:20px;border-color:red" @onclick="(e)=>onclick(e,a)" class="e-icons e-plus-icon"></span>@a
            </HeaderTemplate>
        </GridColumn>
        <GridColumn Field=@nameof(EmployeeData.LastName) HeaderText="Last Name" Width="130">
            <HeaderTemplate>
                @{
                    var a = "LastName";
                }
               <span style="width:20px;height:20px;border-color:red" @onclick="(e)=>onclick(e,a)" class="e-icons e-plus-icon"></span>@a
            </HeaderTemplate>
        </GridColumn>
        <GridColumn Field=@nameof(EmployeeData.Title) HeaderText="Title" Width="120" Visible="false">
            <HeaderTemplate>
                @{
                    var a = "Title";
                }
               <span style="width:20px;height:20px;border-color:red" @onclick="(e)=>onclick(e,a)" class="e-icons e-plus-icon"></span>@a
            </HeaderTemplate>
        </GridColumn>
        <GridColumn Field=@nameof(EmployeeData.HireDate) HeaderText="Hire Date" Format="d" TextAlign="TextAlign.Right" Visible="false" Width="150">
            <HeaderTemplate>
                @{
                    var a = "HireDate";
                }
               <span style="width:20px;height:20px;border-color:red" @onclick="(e)=>onclick(e,a)" class="e-icons e-plus-icon"></span>@a
            </HeaderTemplate>
        </GridColumn>
        <GridColumn Field=@nameof(EmployeeData.ColumnA) HeaderText="ColumnA" Format="d" TextAlign="TextAlign.Right" Visible="false" Width="150">
            <HeaderTemplate>
                @{
                    var a = "ColumnA";
                }
               <span style="width:20px;height:20px;border-color:red" @onclick="(e)=>onclick(e,a)" class="e-icons e-plus-icon"></span>@a
            </HeaderTemplate>
        </GridColumn>
        <GridColumn Field=@nameof(EmployeeData.ColumnB) HeaderText="ColumnB" Format="d" TextAlign="TextAlign.Right" Visible="false" Width="150">
            <HeaderTemplate>
                @{
                    var a = "ColumnB";
                }
               <span style="width:20px;height:20px;border-color:red" @onclick="(e)=>onclick(e,a)" class="e-icons e-plus-icon"></span>@a
            </HeaderTemplate>
        </GridColumn>
        <GridColumn Field=@nameof(EmployeeData.ColumnC) HeaderText="ColumnC" Format="d" TextAlign="TextAlign.Right" Visible="false" Width="150">
            <HeaderTemplate>
                @{
                    var a = "ColumnC";
                }
               <span style="width:20px;height:20px;border-color:red" @onclick="(e)=>onclick(e,a)" class="e-icons e-plus-icon"></span>@a
            </HeaderTemplate>
        </GridColumn>
        <GridColumn Field=@nameof(EmployeeData.ColumnD) HeaderText="ColumnD" Format="d" TextAlign="TextAlign.Right" Visible="false" Width="150">
            <HeaderTemplate>
                @{
                    var a = "ColumnD";
                }
                <span style="width:20px;height:20px;border-color:red" @onclick="(e)=>onclick(e,a)" class="e-icons e-plus-icon"></span>@a
            </HeaderTemplate>
        </GridColumn>
        <GridColumn Field=@nameof(EmployeeData.ColumnE) HeaderText="ColumnE" Format="d" TextAlign="TextAlign.Right" Visible="false" Width="150">
            <HeaderTemplate>
                @{
                    var a = "ColumnE";
                }
               <span style="width:20px;height:20px;border-color:red" @onclick="(e)=>onclick(e,a)" class="e-icons e-plus-icon"></span>@a
            </HeaderTemplate>
        </GridColumn>
    </GridColumns>
</SfGrid>
<style>
    .e-plus-icon::before {
        content: '\e759';
    }
</style>
@code{
    private SfGrid<EmployeeData> DefaultGrid;
    public List<GridColumn> VisibleCols { get; set; }
    public double currentColIndex;
    public async Task onclick(MouseEventArgs e, string ColName)
    {
        await this.DefaultGrid.OpenColumnChooser(350, 70);
        VisibleCols = await DefaultGrid.GetVisibleColumns();
        var colsList = await DefaultGrid.GetColumnFieldNames();
        currentColIndex = colsList.IndexOf(ColName);
    }
    public async Task OnActionComplete(ActionEventArgs<EmployeeData> args)
    {
        if (args.RequestType.Equals(Action.ColumnState))
        {
            foreach (var a in args.VisibleColumns)
            {
                if (VisibleCols.Where(e => e.Field == a.Field).Count() == 0)
                {
                    currentColIndex = currentColIndex + 1;
                    await Task.Delay(200);
                    await this.DefaultGrid.ReorderColumnByTargetIndex(a.Field, currentColIndex);
                }
            }
            this.DefaultGrid.Refresh();
        }
    }

    public List<EmployeeData> Employees { get; set; }

    protected override void OnInitialized()
    {
        Employees = Enumerable.Range(1, 9).Select(x => new EmployeeData()
        {
            EmployeeID = x,
            FirstName = (new string[] { "Nancy", "Andrew", "Janet", "Margaret", "Steven" })[new Random().Next(5)],
            ColumnA = (new string[] { "Nancy", "Andrew", "Janet", "Margaret", "Steven" })[new Random().Next(5)],
            ColumnB = (new string[] { "Nancy", "Andrew", "Janet", "Margaret", "Steven" })[new Random().Next(5)],
            ColumnC = (new string[] { "Nancy", "Andrew", "Janet", "Margaret", "Steven" })[new Random().Next(5)],
            ColumnD = (new string[] { "Nancy", "Andrew", "Janet", "Margaret", "Steven" })[new Random().Next(5)],
            ColumnE = (new string[] { "Nancy", "Andrew", "Janet", "Margaret", "Steven" })[new Random().Next(5)],
            LastName = (new string[] { "Davolio", "Fuller", "Leverling", "Peacock", "Buchanan" })[new Random().Next(5)],
            Title = (new string[] { "Sales Representative", "Vice President, Sales", "Sales Manager",
                                "Inside Sales Coordinator" })[new Random().Next(4)],
            HireDate = DateTime.Now.AddDays(-x),
        }).ToList();
    }


    public class EmployeeData
    {
        public int? EmployeeID { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Title { get; set; }
        public string ColumnA { get; set; }
        public string ColumnB { get; set; }
        public string ColumnC { get; set; }
        public string ColumnD { get; set; }
        public string ColumnE { get; set; }
        public DateTime? HireDate { get; set; }
    }
}